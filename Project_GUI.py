# -*- coding: utf-8 -*-
from functools import partial

# Form implementation generated from reading ui file 'C:\Intro to software engineering Project\Project_GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets, QtGui
from PyQt5.QtGui import QPixmap
from map import *
from combat import *
import copy
from PyQt5.QtWidgets import QMessageBox

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(1117, 606)
        MainWindow.setStyleSheet("background-color:lightgrey;")

        #height and width so you can manipulate it
        self.MAPwidth = 20
        self.MAPheight = 515
        self.speed = 35
        self.old_left_gauntlet = None
        self.old_body_armor = None
        self.old_head_armor = None
        self.old_right_gauntlet = None
        self.old_pants = None
        self.old_Boots = None
        self.old_weapon = None
        self.map_dict = {0:"None", 1:None,2:None,3:None,4:None,5:None}
        self.player_dict = {1:None,2:None,3:None,4:None,5:None}

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Forward_button = QtWidgets.QPushButton(self.centralwidget)
        self.Forward_button.setGeometry(QtCore.QRect(820, 450, 93, 28))
        self.Forward_button.setStyleSheet("background-color:darkred;\n"
                                          "color:white;\n"
                                          "font:bold 14px;\n"
                                          "border-style:outset;\n"
                                          "border-width:2px;\n"
                                          "border-color:black;")
        self.Forward_button.setObjectName("Forward_button")
        "added lambda functions to check for clicks"
        self.Forward_button.clicked.connect(self.mov_up)
        self.Backward_button = QtWidgets.QPushButton(self.centralwidget)
        self.Backward_button.setGeometry(QtCore.QRect(820, 510, 93, 28))
        self.Backward_button.setStyleSheet("background-color:darkred;\n"
                                           "color:white;\n"
                                           "font:bold 14px;\n"
                                           "border-style:outset;\n"
                                           "border-width:2px;\n"
                                           "border-color:black;")
        self.Backward_button.setObjectName("Backward_button")
        self.Backward_button.clicked.connect(self.mov_down)
        self.Right_button = QtWidgets.QPushButton(self.centralwidget)
        self.Right_button.setGeometry(QtCore.QRect(900, 480, 93, 28))
        self.Right_button.setStyleSheet("background-color:darkred;\n"
                                        "color:white;\n"
                                        "font:bold 14px;\n"
                                        "border-style:outset;\n"
                                        "border-width:2px;\n"
                                        "border-color:black;")
        self.Right_button.setObjectName("Right_button")
        self.Right_button.clicked.connect(self.mov_right)
        self.Left_button = QtWidgets.QPushButton(self.centralwidget)
        self.Left_button.setGeometry(QtCore.QRect(740, 480, 93, 28))
        self.Left_button.setStyleSheet("background-color:darkred;\n"
                                       "color:white;\n"
                                       "font:bold 14px;\n"
                                       "border-style:outset;\n"
                                       "border-width:2px;\n"
                                       "border-color:black;")
        self.Left_button.setObjectName("Left_button")
        self.Left_button.clicked.connect(self.mov_left)
        self.Attack_button = QtWidgets.QPushButton(self.centralwidget)
        self.Attack_button.setGeometry(QtCore.QRect(480, 440, 141, 111))
        self.Attack_button.setStyleSheet("background-color:red;\n"
                                         "color:white;\n"
                                         "font:bold 24px;\n"
                                         "border-style:outset;\n"
                                         "border-width:2px;\n"
                                         "border-color:black;")
        self.Attack_button.setObjectName("Attack_button")
        self.Attack_button.clicked.connect(self.gui_combat)
        self.Player_stats = QtWidgets.QTextEdit(self.centralwidget)
        self.Player_stats.setGeometry(QtCore.QRect(950, 10, 161, 281))
        self.Player_stats.setStyleSheet("background-color:white;\n"
                                        "color:black;\n"
                                        "font:bold 14px;\n"
                                        "border-style:outset;\n"
                                        "border-width:2px;\n"
                                        "border-color:black;")
        self.Player_stats.setReadOnly(True)
        self.Player_stats.setObjectName("Player_stats")
        self.Main_text_box = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.Main_text_box.setGeometry(QtCore.QRect(400, 306, 311, 121))
        self.Main_text_box.setStyleSheet("background-color:white;\n"
                                         "color:black;\n"
                                         "font:bold 14px;\n"
                                         "border-style:outset;\n"
                                         "border-width:2px;\n"
                                         "border-color:black;")
        self.Main_text_box.setReadOnly(True)
        self.Main_text_box.setObjectName("Main_text_box")

        self.Image_box = QtWidgets.QLabel(self.centralwidget)
        self.Image_box.setGeometry(QtCore.QRect(410, 60, 261, 181))
        self.Image_box.setText("")
        self.Image_box.setPixmap(QtGui.QPixmap("./Resources/dungeon1.jpg"))
        self.Image_box.setScaledContents(True)
        self.Image_box.setObjectName("Image_box")

        # stuff to get the map loaded
        pixmap = QPixmap('./Resources/level_1.png')
        pixmap = pixmap.scaled(281,181)
        self.Level_box = QtWidgets.QLabel(self.centralwidget)
        self.Level_box.setGeometry(QtCore.QRect(20, 370, 281, 181))
        self.Level_box.setObjectName("Level_box")
        self.Level_box.setPixmap(pixmap)

        #Stuff to get the player loaded
        pixplayer = QPixmap('./Resources/fighter.jpg')
        pixplayer = pixplayer.scaled(35, 35)
        self.Map_box = QtWidgets.QLabel(self.centralwidget)
        self.Map_box.setGeometry(QtCore.QRect(self.MAPwidth, self.MAPheight, 35, 35))
        self.Map_box.setObjectName("Map_box")
        self.Map_box.setPixmap(pixplayer)

        self.Potion_one = QtWidgets.QPushButton(self.centralwidget)
        self.Potion_one.setGeometry(QtCore.QRect(380, 430, 93, 28))
        self.Potion_one.setStyleSheet("background-color:green;\n"
                                      "color:white;\n"
                                      "font:bold 14px;\n"
                                      "border-style:outset;\n"
                                      "border-width:2px;\n"
                                      "border-color:black;")
        self.Potion_one.setObjectName("S Potion")
        self.Potion_one.clicked.connect(self.small_potion)
        self.Potion_two = QtWidgets.QPushButton(self.centralwidget)
        self.Potion_two.setGeometry(QtCore.QRect(380, 460, 93, 28))
        self.Potion_two.setStyleSheet("background-color:purple;\n"
                                      "color:white;\n"
                                      "font:bold 14px;\n"
                                      "border-style:outset;\n"
                                      "border-width:2px;\n"
                                      "border-color:black;")
        self.Potion_two.setObjectName("Potion_two")
        self.Potion_two.clicked.connect(self.med_potion)
        self.Potion_three = QtWidgets.QPushButton(self.centralwidget)
        self.Potion_three.setGeometry(QtCore.QRect(380, 490, 93, 28))
        self.Potion_three.setStyleSheet("background-color:blue;\n"
                                        "color:white;\n"
                                        "font:bold 14px;\n"
                                        "border-style:outset;\n"
                                        "border-width:2px;\n"
                                        "border-color:black;")
        self.Potion_three.setObjectName("Potion_three")
        self.Potion_three.clicked.connect(self.large_potion)

        self.Head_armor = QtWidgets.QComboBox(self.centralwidget)
        self.Head_armor.setGeometry(QtCore.QRect(90, 20, 221, 31))
        self.Head_armor.setStyleSheet("background-color:white;\n"
                                      "color:black;\n"
                                      "font:bold 14px;\n"
                                      "border-style:outset;\n"
                                      "border-width:2px;\n"
                                      "border-color:black;")
        self.Head_armor.setObjectName("Head_armor")
        self.Body_armor = QtWidgets.QComboBox(self.centralwidget)
        self.Body_armor.setGeometry(QtCore.QRect(90, 60, 221, 31))
        self.Body_armor.setStyleSheet("background-color:white;\n"
                                      "color:black;\n"
                                      "font:bold 14px;\n"
                                      "border-style:outset;\n"
                                      "border-width:2px;\n"
                                      "border-color:black;")
        self.Body_armor.setObjectName("Body_armor")
        self.Gauntlet_left = QtWidgets.QComboBox(self.centralwidget)
        self.Gauntlet_left.setGeometry(QtCore.QRect(90, 100, 221, 31))
        self.Gauntlet_left.setStyleSheet("background-color:white;\n"
                                         "color:black;\n"
                                         "font:bold 14px;\n"
                                         "border-style:outset;\n"
                                         "border-width:2px;\n"
                                         "border-color:black;")
        self.Gauntlet_left.setObjectName("Gauntlet_left")
        self.Gauntlet_right = QtWidgets.QComboBox(self.centralwidget)
        self.Gauntlet_right.setGeometry(QtCore.QRect(90, 140, 221, 31))
        self.Gauntlet_right.setStyleSheet("background-color:white;\n"
                                          "color:black;\n"
                                          "font:bold 14px;\n"
                                          "border-style:outset;\n"
                                          "border-width:2px;\n"
                                          "border-color:black;")
        self.Gauntlet_right.setObjectName("Gauntlet_right")
        self.pants = QtWidgets.QComboBox(self.centralwidget)
        self.pants.setGeometry(QtCore.QRect(90, 180, 221, 31))
        self.pants.setStyleSheet("background-color:white;\n"
                                          "color:black;\n"
                                          "font:bold 14px;\n"
                                          "border-style:outset;\n"
                                          "border-width:2px;\n"
                                          "border-color:black;")
        self.pants.setObjectName("pants")
        self.Boots = QtWidgets.QComboBox(self.centralwidget)
        self.Boots.setGeometry(QtCore.QRect(90, 220, 221, 31))
        self.Boots.setStyleSheet("background-color:white;\n"
                                           "color:black;\n"
                                           "font:bold 14px;\n"
                                           "border-style:outset;\n"
                                           "border-width:2px;\n"
                                           "border-color:black;")
        self.Boots.setObjectName("Boots")

        self.Weapon = QtWidgets.QComboBox(self.centralwidget)
        self.Weapon.setGeometry(QtCore.QRect(640, 450, 81, 41))
        self.Weapon.setStyleSheet("background-color:white;\n"
                                  "color:black;\n"
                                  "font:bold 10px;\n"
                                  "border-style:outset;\n"
                                  "border-width:2px;\n"
                                  "border-color:black;")
        self.Weapon.setObjectName("Weapon")

        self.Head_armor_accept = QtWidgets.QPushButton(self.centralwidget)
        self.Head_armor_accept.setGeometry(QtCore.QRect(330, 20, 51, 28))
        self.Head_armor_accept.setStyleSheet("background-color:white;\n"
                                             "color:black;\n"
                                             "font:bold 12px;\n"
                                             "border-style:outset;\n"
                                             "border-width:2px;\n"
                                             "border-color:black;\n"
                                             "font-family:fantasy;")
        self.Head_armor_accept.setObjectName("Head_armor_accept")
        self.Head_armor_accept.clicked.connect(self.equip_head_armor)
        self.Body_armor_accept = QtWidgets.QPushButton(self.centralwidget)
        self.Body_armor_accept.setGeometry(QtCore.QRect(330, 60, 51, 28))
        self.Body_armor_accept.setStyleSheet("background-color:white;\n"
                                             "color:black;\n"
                                             "font:bold 12px;\n"
                                             "border-style:outset;\n"
                                             "border-width:2px;\n"
                                             "border-color:black;")
        self.Body_armor_accept.setObjectName("Body_armor_accept")
        self.Body_armor_accept.clicked.connect(self.equip_body_armor)
        self.Left_gauntlet_accept = QtWidgets.QPushButton(self.centralwidget)
        self.Left_gauntlet_accept.setGeometry(QtCore.QRect(330, 100, 51, 28))
        self.Left_gauntlet_accept.setStyleSheet("background-color:white;\n"
                                                 "color:black;\n"
                                                 "font:bold 12px;\n"
                                                 "border-style:outset;\n"
                                                 "border-width:2px;\n"
                                                 "border-color:black;")
        self.Left_gauntlet_accept.setObjectName("Left_gauntlet_accept")
        self.Left_gauntlet_accept.clicked.connect(self.equip_left_gauntlet)
        self.Right_gauntlet_accept = QtWidgets.QPushButton(self.centralwidget)
        self.Right_gauntlet_accept.setGeometry(QtCore.QRect(330, 140, 51, 28))
        self.Right_gauntlet_accept.setStyleSheet("background-color:white;\n"
                                                 "color:black;\n"
                                                 "font:bold 12px;\n"
                                                 "border-style:outset;\n"
                                                 "border-width:2px;\n"
                                                 "border-color:black;")
        self.Right_gauntlet_accept.setObjectName("Right_gauntlet_accept")
        self.Right_gauntlet_accept.clicked.connect(self.equip_right_gauntlet)
        self.pants_accept = QtWidgets.QPushButton(self.centralwidget)
        self.pants_accept.setGeometry(QtCore.QRect(330, 180, 51, 28))
        self.pants_accept.setStyleSheet("background-color:white;\n"
                                           "color:black;\n"
                                           "font:bold 12px;\n"
                                           "border-style:outset;\n"
                                           "border-width:2px;\n"
                                           "border-color:black;")
        self.pants_accept.setObjectName("pants_accept")
        self.pants_accept.clicked.connect(self.equip_pants)
        self.Boots_accept = QtWidgets.QPushButton(self.centralwidget)
        self.Boots_accept.setGeometry(QtCore.QRect(330, 220, 51, 28))
        self.Boots_accept.setStyleSheet("background-color:white;\n"
                                            "color:black;\n"
                                            "font:bold 12px;\n"
                                            "border-style:outset;\n"
                                            "border-width:2px;\n"
                                            "border-color:black;")
        self.Boots_accept.setObjectName("Boots_accept")
        self.Boots_accept.clicked.connect(self.equip_Boots)
        self.Weapon_accept = QtWidgets.QPushButton(self.centralwidget)
        self.Weapon_accept.setGeometry(QtCore.QRect(650, 500, 61, 28))
        self.Weapon_accept.setStyleSheet("background-color:white;\n"
                                         "color:black;\n"
                                         "font:bold 12px;\n"
                                         "border-style:outset;\n"
                                         "border-width:2px;\n"
                                         "border-color:black;")
        self.Weapon_accept.setObjectName("Weapon_accept")
        self.Weapon_accept.clicked.connect(self.equip_weapon)
        self.inv_box = QtWidgets.QTextEdit(self.centralwidget)
        self.inv_box.setGeometry(QtCore.QRect(750, 10, 171, 281))
        self.inv_box.setStyleSheet("background-color:white;\n"
                                       "color:black;\n"
                                       "font:bold 14px;\n"
                                       "border-style:outset;\n"
                                       "border-width:2px;\n"
                                       "border-color:black;")
        self.inv_box.setReadOnly(True)
        self.inv_box.setObjectName("inv_box")
        self.Next_button = QtWidgets.QPushButton(self.centralwidget)
        self.Next_button.setGeometry(QtCore.QRect(610, 390, 93, 28))
        self.Next_button.setStyleSheet("background-color:white;\n"
                                       "color:black;\n"
                                       "font:bold 12px;\n"
                                       "border-style:outset;\n"
                                       "border-width:2px;\n"
                                       "border-color:black;")
        self.Next_button.setObjectName("Next_button")
        self.Next_button.clicked.connect(self.Unlock_bottons)
        self.Chest_label = QtWidgets.QLabel(self.centralwidget)
        self.Chest_label.setGeometry(QtCore.QRect(40, 315, 81, 31))
        self.Chest_label.setObjectName("Chest_label")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1117, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Forward_button.setText(_translate("MainWindow", "Forward"))
        self.Backward_button.setText(_translate("MainWindow", "Backward"))
        self.Right_button.setText(_translate("MainWindow", "Right"))
        self.Left_button.setText(_translate("MainWindow", "Left"))
        self.Attack_button.setText(_translate("MainWindow", "Attack"))
        self.Player_stats.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Stats</p></body></html>"))
        self.Main_text_box.setPlainText(_translate("MainWindow", "You begin your journey anew use the bottons to the right to navigate"))
        self.Potion_one.setText(_translate("MainWindow", "Potion 1"))
        self.Potion_two.setText(_translate("MainWindow", "Potion 2"))
        self.Potion_three.setText(_translate("MainWindow", "Potion 3"))
        self.Weapon_accept.setText(_translate("MainWindow", "Equip"))
        self.Head_armor_accept.setText(_translate("MainWindow", "Equip"))
        self.Body_armor_accept.setText(_translate("MainWindow", "Equip"))
        self.Boots_accept.setText(_translate("MainWindow", "Equip"))
        self.pants_accept.setText(_translate("MainWindow", "Equip"))
        self.Left_gauntlet_accept.setText(_translate("MainWindow", "Equip"))
        self.Right_gauntlet_accept.setText(_translate("MainWindow", "Equip"))
        self.Attack_button.setEnabled(False)
        self.Next_button.setEnabled(False)
        self.Next_button.setText(_translate("MainWindow", "Next"))


    def mov_up(self):
        #Moving logic
        x = self.Map_box.x()
        y = self.Map_box.y()
        valid_move = move_player(self.GUImap, "up", self.player)
        if valid_move == 0:
            self.Map_box.move(x, y - self.speed)
            update_screen(self.Image_box, self.player, self.GUImap, self)
        elif valid_move == 1 or valid_move == 2:
            self.lock_buttons(1)
            self.Map_box.move(x, y - self.speed)
            enemy_screen(self.Image_box, self.player, self.GUImap, self)
        elif valid_move == 3:
            self.lock_buttons(2)
            self.Map_box.move(x, y - self.speed)
            update_screen(self.Image_box, self.player, self.GUImap, self)
            x, y = self.player.location
            for items in self.GUImap.map[x][y].enemy:
                self.pickup_item(items)
        elif valid_move == 4:
            self.map_dict[self.GUImap.level] = copy.deepcopy(self.GUImap)
            if self.map_dict[self.GUImap.level + 1] == None:
                dun = LevelMap(self.GUImap.level + 1)
                self.map_dict[self.GUImap.level + 1] = dun
            self.GUImap = self.map_dict[self.GUImap.level + 1]
            self.player.location = self.GUImap.player_position
            self.player_dict[self.GUImap.level] = copy.deepcopy(self.player)
            self.load_map("d")
        elif valid_move == 5:
            dun = copy.deepcopy(self.map_dict[self.GUImap.level - 1])
            self.GUImap = dun
            self.player_dict[self.GUImap.level] = copy.deepcopy(self.player)
            self.player.location = self.GUImap.player_position
            self.load_map("u")



        update_player_display(self.player, self)
        self.GUImap.display_map()


    def mov_right(self):
        x = self.Map_box.x()
        y = self.Map_box.y()
        valid_move = move_player(self.GUImap, "right", self.player)
        if valid_move == 0:
            self.Map_box.move(x + self.speed, y)
            update_screen(self.Image_box, self.player, self.GUImap, self)
        elif valid_move == 1 or valid_move == 2:
            self.lock_buttons(1)
            self.Map_box.move(x + self.speed, y)
            enemy_screen(self.Image_box, self.player, self.GUImap, self)
        elif valid_move == 3:
            self.lock_buttons(2)
            self.Map_box.move(x + self.speed, y)
            update_screen(self.Image_box, self.player, self.GUImap, self)
            x, y = self.player.location
            for items in self.GUImap.map[x][y].enemy:
                self.pickup_item(items)
        elif valid_move == 4:
            self.map_dict[self.GUImap.level] = copy.deepcopy(self.GUImap)
            if self.map_dict[self.GUImap.level + 1] == None:
                dun = LevelMap(self.GUImap.level + 1)
                self.map_dict[self.GUImap.level + 1] = dun
            self.GUImap = self.map_dict[self.GUImap.level + 1]
            self.player.location = self.GUImap.player_position
            self.player_dict[self.GUImap.level] = copy.deepcopy(self.player)
            self.load_map("d")
            print(self.map_dict)
        elif valid_move == 5:
            dun = copy.deepcopy(self.map_dict[self.GUImap.level - 1])
            self.GUImap = dun
            self.player_dict[self.GUImap.level] = copy.deepcopy(self.player)
            self.player.location = self.GUImap.player_position
            self.load_map("u")


        update_player_display(self.player, self)
        self.GUImap.display_map()

    def mov_left(self):
        x = self.Map_box.x()
        y = self.Map_box.y()
        valid_move = move_player(self.GUImap, "left", self.player)
        if valid_move == 0:
            self.Map_box.move(x - self.speed, y)
            update_screen(self.Image_box, self.player, self.GUImap, self)
        elif valid_move == 1 or valid_move == 2:
            self.lock_buttons(1)
            self.Map_box.move(x - self.speed, y)
            enemy_screen(self.Image_box, self.player, self.GUImap, self)
        elif valid_move == 3:
            self.lock_buttons(2)
            self.Map_box.move(x - self.speed, y)
            update_screen(self.Image_box, self.player, self.GUImap, self)
            x,y = self.player.location
            for items in self.GUImap.map[x][y].enemy:
                self.pickup_item(items)
        elif valid_move == 4:
            self.map_dict[self.GUImap.level] = copy.deepcopy(self.GUImap)
            if self.map_dict[self.GUImap.level + 1] == None:
                dun = LevelMap(self.GUImap.level + 1)
                self.map_dict[self.GUImap.level + 1] = dun
            self.GUImap = self.map_dict[self.GUImap.level + 1]
            self.player.location = self.GUImap.player_position
            self.player_dict[self.GUImap.level] = copy.deepcopy(self.player)
            self.load_map("d")
        elif valid_move == 5:
            dun = copy.deepcopy(self.map_dict[self.GUImap.level - 1])
            self.GUImap = dun
            self.player_dict[self.GUImap.level] = copy.deepcopy(self.player)
            self.player.location = self.GUImap.player_position
            self.load_map("u")




        update_player_display(self.player, self)
        self.GUImap.display_map()

    def mov_down(self):
        x = self.Map_box.x()
        y = self.Map_box.y()
        valid_move = move_player(self.GUImap, "down", self.player)
        if valid_move == 0:
            self.Map_box.move(x, y + self.speed)
            update_screen(self.Image_box, self.player, self.GUImap, self)
        elif valid_move == 1 or valid_move == 2:
            self.lock_buttons(1)
            self.Map_box.move(x, y + self.speed)
            enemy_screen(self.Image_box, self.player, self.GUImap, self)
        elif valid_move == 3:
            self.lock_buttons(2)
            self.Map_box.move(x, y + self.speed)
            update_screen(self.Image_box, self.player, self.GUImap, self)
            x, y = self.player.location
            for items in self.GUImap.map[x][y].enemy:
                self.pickup_item(items)
        elif valid_move == 4:
            self.map_dict[self.GUImap.level] = copy.deepcopy(self.GUImap)
            if self.map_dict[self.GUImap.level + 1] == None:
                dun = LevelMap(self.GUImap.level + 1)
                self.map_dict[self.GUImap.level + 1] = dun
            self.GUImap = self.map_dict[self.GUImap.level + 1]
            self.player.location = self.GUImap.player_position
            self.player_dict[self.GUImap.level] = copy.deepcopy(self.player)
            self.load_map("d")
        elif valid_move == 5:
            dun = copy.deepcopy(self.map_dict[self.GUImap.level - 1])
            self.GUImap = dun
            self.player_dict[self.GUImap.level] = copy.deepcopy(self.player)
            self.player.location = self.GUImap.player_position
            self.load_map("u")


        update_player_display(self.player, self)
        self.GUImap.display_map()

    def lock_buttons(self, val):
        if val == 1:
            self.Left_button.setEnabled(False)
            self.Right_button.setEnabled(False)
            self.Forward_button.setEnabled(False)
            self.Backward_button.setEnabled(False)
            self.Attack_button.setEnabled(True)
        if val == 2:
            self.Left_button.setEnabled(False)
            self.Right_button.setEnabled(False)
            self.Forward_button.setEnabled(False)
            self.Backward_button.setEnabled(False)
            self.Next_button.setEnabled(True)

    def Unlock_bottons(self):
        self.Left_button.setEnabled(True)
        self.Right_button.setEnabled(True)
        self.Forward_button.setEnabled(True)
        self.Backward_button.setEnabled(True)
        self.Attack_button.setEnabled(False)
        self.Next_button.setEnabled(False)


    def gui_combat(self):
        x,y = self.player.location
        combat_val = combat(self.player, self.GUImap.map[x][y].enemy)
        main = "Player Health: " + str(self.player.current_health) + "\nEnemy Health: " + str(self.GUImap.map[x][y].enemy.current_health)
        self.Main_text_box.setPlainText(QtCore.QCoreApplication.translate("MainWindow", main))
        update_player_display(self.player,self)
        if combat_val == 0:
            self.Unlock_bottons()
            self.GUImap.map[x][y].room_type = '.'
            self.GUImap.map[x][y].prev = 1
        elif combat_val == 2:
            print("died")
            self.show_popup()

    def equip_body_armor(self):
        selected_body_armor = self.Body_armor.currentText()
        if selected_body_armor:
            if self.old_body_armor != None:
                self.player.unequip_armor(self.old_body_armor)
            for equipment in self.player.inventory["armor"]:
                if equipment.name == selected_body_armor:
                    selected_body_armor = equipment
            self.player.equip_armor(selected_body_armor)
            update_player_display(self.player,self)
        self.old_body_armor = selected_body_armor

    def equip_head_armor(self):
        selected_head_armor = self.Head_armor.currentText()
        if selected_head_armor:
            if self.old_head_armor != None:
                self.player.unequip_armor(self.old_head_armor)
            for equipment in self.player.inventory["armor"]:
                if equipment.name == selected_head_armor:
                    selected_head_armor = equipment
            self.player.equip_armor(selected_head_armor)
            update_player_display(self.player,self)
        self.old_head_armor = selected_head_armor

    def equip_left_gauntlet(self):
        selected_left_gauntlet = self.Gauntlet_left.currentText()
        if selected_left_gauntlet:
            if self.old_left_gauntlet != None:
                self.player.unequip_armor(self.old_left_gauntlet)
            for equipment in self.player.inventory["armor"]:
                if equipment.name == selected_left_gauntlet:
                    selected_left_gauntlet = equipment
            self.player.equip_armor(selected_left_gauntlet)
            update_player_display(self.player,self)
        self.old_left_gauntlet = selected_left_gauntlet


    def equip_right_gauntlet(self):
        selected_right_gauntlet = self.Gauntlet_right.currentText()
        if selected_right_gauntlet:
            if self.old_right_gauntlet != None:
                self.player.unequip_armor(self.old_right_gauntlet)
            for equipment in self.player.inventory["armor"]:
                if equipment.name == selected_right_gauntlet:
                    selected_right_gauntlet = equipment
            self.player.equip_armor(selected_right_gauntlet)
            update_player_display(self.player,self)

        self.old_right_gauntlet = selected_right_gauntlet

    def equip_pants(self):
        selected_pants = self.pants.currentText()
        if selected_pants:
            if self.old_pants != None:
                self.player.unequip_armor(self.old_pants)
            for equipment in self.player.inventory["armor"]:
                if equipment.name == selected_pants:
                    selected_pants = equipment
            self.player.equip_armor(selected_pants)
            update_player_display(self.player,self)
        self.old_pants = selected_pants

    def equip_Boots(self):
        selected_Boots = self.Boots.currentText()
        if selected_Boots:
            if self.old_Boots != None:
                self.player.unequip_armor(self.old_Boots)
            for equipment in self.player.inventory["armor"]:
                if equipment.name == selected_Boots:
                    selected_Boots = equipment
            self.player.equip_armor(selected_Boots)
            update_player_display(self.player,self)
        self.old_Boots = selected_Boots

    def equip_weapon(self):
        selected_weapon = self.Weapon.currentText()
        if selected_weapon:
            if self.old_weapon != None:
                self.player.unequip_weapon(self.old_weapon)
            for equipment in self.player.inventory["weapon"]:
                if equipment.name == selected_weapon:
                    selected_weapon = equipment
            self.player.equip_weapon(selected_weapon)
            update_player_display(self.player,self)
        self.old_weapon = selected_weapon

    def pickup_item(self, item): #Function to be used in chest rooms
        if isinstance(item, armor):
            if item.body_part == "body_armor":
                self.Body_armor.addItem(item.name)
                self.player.inventory["armor"].append(item)
            elif item.body_part == "head_armor":
                self.Head_armor.addItem(item.name)
                self.player.inventory["armor"].append(item)
            elif item.body_part == "left_gauntlet":
                self.Gauntlet_left.addItem(item.name)
                self.player.inventory["armor"].append(item)
            elif item.body_part == "right_gauntlet":
                self.Gauntlet_right.addItem(item.name)
                self.player.inventory["armor"].append(item)
            elif item.body_part == "pants":
                self.pants.addItem(item.name)
                self.player.inventory["armor"].append(item)
            elif item.body_part == "boots":
                self.Boots.addItem(item.name)
                self.player.inventory["armor"].append(item)
        elif isinstance(item, weapon):
            self.Weapon.addItem(item.name)
            self.player.inventory["weapon"].append(item)
        elif isinstance(item, potion):
            self.player.inventory["potion"].append(item)

    def small_potion(self):
        if self.player.inventory["potion"] == []:
            self.Main_text_box.setPlainText(QtCore.QCoreApplication.translate("MainWindow", "You have no potions"))
        for items in self.player.inventory["potion"]:
            if items.name == "Small Potion":
                self.player.current_health = self.player.current_health + 10
                if self.player.current_health > self.player.max_health:
                    self.player.current_health = self.player.max_health
                self.player.drop_potion(items)
                update_player_display(self.player, self)
                return
            else:
                self.Main_text_box.setPlainText(QtCore.QCoreApplication.translate("MainWindow", "You don't have a small potion"))

    def med_potion(self):
        if self.player.inventory["potion"] == []:
            self.Main_text_box.setPlainText(QtCore.QCoreApplication.translate("MainWindow", "You have no potions"))
        for items in self.player.inventory["potion"]:
            if items.name == "Medium Potion":
                self.player.current_health = self.player.current_health + 25
                if self.player.current_health > self.player.max_health:
                    self.player.current_health = self.player.max_health
                self.player.drop_potion(items)
                update_player_display(self.player, self)
                return
            else:
                self.Main_text_box.setPlainText(QtCore.QCoreApplication.translate("MainWindow", "You don't have a medium potion"))

    def large_potion(self):
        if self.player.inventory["potion"] == []:
            self.Main_text_box.setPlainText(QtCore.QCoreApplication.translate("MainWindow", "You have no potions"))
        for items in self.player.inventory["potion"]:
            if items.name == "Large Potion":
                self.player.current_health = self.player.current_health + 75
                if self.player.current_health > self.player.max_health:
                    self.player.current_health = self.player.max_health
                self.player.drop_potion(items)
                update_player_display(self.player, self)
                return
            else:
                self.Main_text_box.setPlainText(QtCore.QCoreApplication.translate("MainWindow", "You don't have a large potion"))

    def load_map(self, dir):
        print("made it to load map")
        temp = "./Resources/level_" + str(self.GUImap.level) + ".png"
        pixmap = QPixmap(temp)
        pixmap = pixmap.scaled(281, 181)
        self.Level_box.setPixmap(pixmap)
        print("dodo")
        #TODO depending on the level we will start in different locations (820, 510, 93, 28)
        if dir == "d":
            match(self.GUImap.level):
                case(1):
                    self.Map_box.setGeometry(QtCore.QRect(self.MAPwidth, 514, 35, 35))
                case(2):
                    self.Map_box.setGeometry(QtCore.QRect(self.MAPwidth, 514, 35, 35))
                case(3):
                    self.Map_box.setGeometry(QtCore.QRect(self.MAPwidth, 371, 35, 35))
                case(4):
                    self.Map_box.setGeometry(QtCore.QRect(self.MAPwidth, 477, 35, 35))
                case(5):
                    self.Map_box.setGeometry(QtCore.QRect(self.MAPwidth, 477, 35, 35))
        else:
            match (self.GUImap.level):
                case (1):
                    self.Map_box.setGeometry(QtCore.QRect(self.MAPwidth + 7*35, 374, 35, 35))
                case (2):
                    self.Map_box.setGeometry(QtCore.QRect(self.MAPwidth + 5*35, 514, 35, 35))
                case (3):
                    self.Map_box.setGeometry(QtCore.QRect(self.MAPwidth + 7*35, 514, 35, 35))
                case (4):
                    if self.player.location == [0,5]:
                        self.Map_box.setGeometry(QtCore.QRect(self.MAPwidth + 5 * 35, 374, 35, 35))
                    elif self.player.location == [4,7]:
                        self.Map_box.setGeometry(QtCore.QRect(self.MAPwidth + 7*35, 514, 35, 35))
                    elif self.player.location == [1,7]:
                        self.Map_box.setGeometry(QtCore.QRect(self.MAPwidth + 7*35, 514 - 3*35, 35, 35))
                    elif self.player.location == [1,0]:
                        self.Map_box.setGeometry(QtCore.QRect(self.MAPwidth, 514 - 3*35, 35, 35))
                    else:
                        self.Map_box.setGeometry(QtCore.QRect(self.MAPwidth + 35*2, 374, 35, 35))
        print("exit")
        #self.Map_box.setGeometry(QtCore.QRect(self.MAPwidth, self.MAPheight, 35, 35))

    def show_popup(self):
        msg = QMessageBox()
        msg.setWindowTitle("You Died")
        msg.setText("Retry from current floor or quit game")
        msg.setIcon(QMessageBox.Critical)
        msg.setStandardButtons(QMessageBox.Retry | QMessageBox.Close)
        msg.buttonClicked.connect(self.popup_button)
        x = msg.exec_()

    def popup_button(self, i):
        if i.text() == "Close":
            exit()
        else:
            self.respawn()

    def respawn(self):
        print(self.map_dict)
        print(self.map_dict[self.GUImap.level - 1])
        if self.map_dict[self.GUImap.level - 1] != 'None':
            print("first floor")
            dun = copy.deepcopy(self.map_dict[self.GUImap.level])
            self.GUImap = dun
            self.player = copy.deepcopy(self.player_dict[self.GUImap.level])
            self.player.location = self.GUImap.exit_position
            self.load_map("d")
            self.Unlock_bottons()
            print("fuck")
            self.empty_pockets()
            self.fill_pockets()
            update_player_display(self.player, self)
            update_screen(self.Image_box, self.player, self.GUImap, self)
        else:
            print("else")
            dungeon = LevelMap(1)  # Create the map object
            myPlayer = player(map_obj=dungeon, max_health=100, current_health=100, attack=20, defense=10,
                              location=dungeon.player_position)
            self.GUImap = dungeon
            self.player = myPlayer
            self.load_map("d")
            self.Unlock_bottons()
            self.empty_pockets()
            self.pickup_item(armor(0, "Basic ChestPlate", "body_armor"))
            self.pickup_item(armor(0, "Basic Helm", "head_armor"))
            self.pickup_item(armor(0, "No Glove", "left_gauntlet"))
            self.pickup_item(armor(0, "No Glove", "right_gauntlet"))
            self.pickup_item(armor(0, "Basic Grieves", "pants"))
            self.pickup_item(armor(0, "Basic Boots", "boots"))
            self.pickup_item(weapon(0, "Basic Sword"))
            update_player_display(self.player, self)
            update_screen(self.Image_box, self.player, self.GUImap, self)

    def empty_pockets(self):
        self.Body_armor.clear()
        self.Head_armor.clear()
        self.Gauntlet_left.clear()
        self.Gauntlet_right.clear()
        self.pants.clear()
        self.Boots.clear()
        self.Weapon.clear()

    def fill_pockets(self):
        for item in self.player.inventory["armor"]:
            if item.body_part == "body_armor":
                self.Body_armor.addItem(item.name)
            elif item.body_part == "head_armor":
                self.Head_armor.addItem(item.name)
            elif item.body_part == "left_gauntlet":
                self.Gauntlet_left.addItem(item.name)
            elif item.body_part == "right_gauntlet":
                self.Gauntlet_right.addItem(item.name)
            elif item.body_part == "pants":
                self.pants.addItem(item.name)
            elif item.body_part == "boots":
                self.Boots.addItem(item.name)
        for item in self.player.inventory["weapon"]:
            self.Weapon.addItem(item.name)

        for item in self.player.armor_list:
            if item.body_part == "body_armor":
                self.Body_armor.addItem(item.name)
            elif item.body_part == "head_armor":
                self.Head_armor.addItem(item.name)
            elif item.body_part == "left_gauntlet":
                self.Gauntlet_left.addItem(item.name)
            elif item.body_part == "right_gauntlet":
                self.Gauntlet_right.addItem(item.name)
            elif item.body_part == "pants":
                self.pants.addItem(item.name)
            elif item.body_part == "boots":
                self.Boots.addItem(item.name)
        for item in self.player.weapon_list:
            self.Weapon.addItem(item.name)

def update_player_display(myPlayer,ui):
    ui.Player_stats.setText(QtCore.QCoreApplication.translate("MainWindow","health:" + str(myPlayer.current_health) + "\nMax Health: " + str(myPlayer.max_health) + "\nCurrent Att: " + str(myPlayer.attack) + "\nCurrent Def: " + str(myPlayer.defense)))
    inv = ""
    for type in myPlayer.inventory.keys():
        for items in myPlayer.inventory[type]:
            inv = inv + items.name + "\n"
    ui.inv_box.setText(QtCore.QCoreApplication.translate("MainWindow", "Inventory:\n" + inv))

def update_screen(screen, player, lvlmap,GUI):
    #update the image on screen
    x,y = player.location
    path = lvlmap.map[x][y].image_path
    screen.setPixmap(QtGui.QPixmap(path))
    screen.setScaledContents(True)
    #update the text box on screen
    newRdesc = lvlmap.map[x][y].Desc
    GUI.Main_text_box.setPlainText(QtCore.QCoreApplication.translate("MainWindow", newRdesc))

def enemy_screen(screen, player, lvlmap,GUI):
    #update the image on screen
    x,y = player.location
    path = lvlmap.map[x][y].enemy_image_path
    screen.setPixmap(QtGui.QPixmap(path))
    screen.setScaledContents(True)
    #update the text box on screen
    newRdesc = lvlmap.map[x][y].enemy_desc
    GUI.Main_text_box.setPlainText(QtCore.QCoreApplication.translate("MainWindow", newRdesc))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())